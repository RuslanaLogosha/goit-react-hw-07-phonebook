{"version":3,"sources":["components/Filter/filter.module.css","components/ContactForm/form.module.css","redux/actions.js","redux/operations.js","redux/selectors.js","components/ContactForm/contactForm.js","components/ContactList/contactList.js","components/Filter/filter.js","components/App.js","redux/reducers.js","redux/store.js","index.js","components/ContactList/contactList.module.css"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","contactsOperations","fetchContacts","dispatch","a","get","data","addContact","name","number","contact","post","deleteContact","id","delete","getContacts","state","contacts","items","getFilter","filter","getVisibleContacts","normalizedFilter","toLowerCase","text","includes","getFiteredContacts","ContactForm","useState","setName","setNumber","contactNameId","shortid","generate","contactNumberId","useDispatch","useSelector","handleChange","e","currentTarget","value","reset","className","s","form","onSubmit","preventDefault","find","alert","label","htmlFor","input","type","onChange","button","ContactList","useEffect","list","map","listItem","listItemText","onClick","onDeleteContact","Filter","filterLabel","filterInput","contactsActions","target","App","createReducer","_","payload","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.120d9aa4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterLabel\":\"filter_filterLabel__1hYoT\",\"filterInput\":\"filter_filterInput__KcP-x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"form_form__20PdV\",\"label\":\"form_label__1bLMQ\",\"input\":\"form_input__egnIr\",\"button\":\"form_button__rbi6y\"};","import { createAction } from '@reduxjs/toolkit';\n\nexport const fetchContactsRequest = createAction(\n  'contacts/fetchContactsRequest',\n);\nexport const fetchContactsSuccess = createAction(\n  'contacts/fetchContactsSuccess',\n);\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\n\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n\nexport const deleteContactRequest = createAction(\n  'contacts/deleteContactRequest',\n);\nexport const deleteContactSuccess = createAction(\n  'contacts/deleteContactSuccess',\n);\nexport const deleteContactError = createAction('contacts/deleteContactError');\n\nexport const changeFilter = createAction('contacts/changeFilter');\n","import axios from 'axios';\nimport {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n} from './actions';\n\naxios.defaults.baseURL = 'http://localhost:4040';\n\nconst fetchContacts = () => async dispatch => {\n  dispatch(fetchContactsRequest());\n  try {\n    const { data } = await axios.get('/contacts');\n    dispatch(fetchContactsSuccess(data));\n  } catch (error) {\n    dispatch(fetchContactsError(error));\n  }\n  // axios\n  //   .get('/contacts')\n  //   .then(({ data }) => dispatch(fetchContactsSuccess(data)))\n  //   .catch(error => dispatch(fetchContactsError(error)));\n};\n\nconst addContact = (name, number) => async dispatch => {\n  const contact = {\n    name,\n    number,\n  };\n\n  dispatch(addContactRequest());\n\n  try {\n    const { data } = await axios.post('/contacts', contact);\n    dispatch(addContactSuccess(data));\n  } catch (error) {\n    dispatch(addContactError(error));\n  }\n};\n\nconst deleteContact = id => async dispatch => {\n  dispatch(deleteContactRequest());\n  try {\n    await axios.delete(`/contacts/${id}`);\n    dispatch(deleteContactSuccess(id));\n  } catch (error) {\n    dispatch(deleteContactError(error));\n  }\n\n  // axios\n  //   .delete(`/contacts/${id}`)\n  //   .then(() => dispatch(deleteContactSuccess(id)))\n  //   .catch(error => dispatch(deleteContactError(error)));\n};\nconst contactsOperations = {\n  fetchContacts,\n  addContact,\n  deleteContact,\n};\nexport default contactsOperations;\n","export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleContacts = state => {\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n\n  const getFiteredContacts = contacts => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(text =>\n      text.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  return getFiteredContacts(contacts);\n};\n","import { useState } from 'react';\nimport shortid from 'shortid';\nimport s from './form.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport contactsOperations from '../../redux/operations';\nimport { getContacts } from '../../redux/selectors';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contactNameId = shortid.generate();\n  const contactNumberId = shortid.generate();\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (name === '') {\n      alert(`Введите, пожалуйста, имя контакта.`);\n      return;\n    }\n\n    if (number === '') {\n      alert(`Введите, пожалуйста, номер телефона контакта.`);\n      return;\n    }\n\n    if (contacts.find(contact => contact.name === name)) {\n      alert(`${name} is already in contacts.`);\n      reset();\n      return;\n    }\n\n    dispatch(contactsOperations.addContact(name, number));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <label className={s.label} htmlFor={contactNameId}>\n        Name\n        <input\n          className={s.input}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          id={contactNameId}\n        />\n      </label>\n      <label className={s.label} htmlFor={contactNumberId}>\n        Number\n        <input\n          className={s.input}\n          type=\"text\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          id={contactNumberId}\n        />\n      </label>\n\n      <button className={s.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './contactList.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport contactsOperations from '../../redux/operations';\nimport { getVisibleContacts } from '../../redux/selectors';\nimport { useEffect } from 'react';\n\nexport default function ContactList() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n\n  const contacts = useSelector(getVisibleContacts);\n\n  const onDeleteContact = id => dispatch(contactsOperations.deleteContact(id));\n\n  return (\n    <ul className={s.list}>\n      {contacts.map(({ id, name, number }) => (\n        <li className={s.listItem} key={id}>\n          <span className={s.listItemText}>{name}:</span>\n          <span className={s.listItemText}>{number}</span>\n          <button\n            className={s.button}\n            type=\"button\"\n            onClick={() => onDeleteContact(id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.array,\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n  onDeleteContact: PropTypes.func,\n};\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from '../../redux/selectors';\nimport * as contactsActions from '../../redux/actions';\n\nimport PropTypes from 'prop-types';\nimport s from './filter.module.css';\n\nconst Filter = () => {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <label className={s.filterLabel}>\n      Find contacts by name\n      <input\n        className={s.filterInput}\n        type=\"text\"\n        value={value}\n        onChange={e => dispatch(contactsActions.changeFilter(e.target.value))}\n      />\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nexport default Filter;\n","import ContactForm from './ContactForm/contactForm';\nimport ContactList from './ContactList/contactList';\nimport Filter from './Filter/filter';\n\nexport default function App() {\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </>\n  );\n}\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport {\n  addContactSuccess,\n  deleteContactSuccess,\n  changeFilter,\n  fetchContactsSuccess,\n} from './actions';\n\nconst items = createReducer([], {\n  [fetchContactsSuccess]: (_, { payload }) => payload,\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport logger from 'redux-logger';\nimport contactsReducer from './reducers';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\n// const persistor = persistStore(store);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"contactList_list__30VP1\",\"listItem\":\"contactList_listItem__3TdBf\",\"listItemText\":\"contactList_listItemText__3wcxP\",\"button\":\"contactList_button__18MOL\"};"],"sourceRoot":""}